import tkinter as tk
from tkinter import filedialog
import pandas as pd


class DataPickerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Data Picker")
        self.file_path = None
        self.variables = []
        self.selected_variables = []
        self.selected_data = None
        self.create_widgets()

    def create_widgets(self):
        self.upload_button = tk.Button(self.root, text="Upload File", command=self.upload_file)
        self.upload_button.pack(pady=10)

        self.variables_label = tk.Label(self.root, text="Variables:")
        self.variables_label.pack()

        self.variables_listbox = tk.Listbox(self.root, selectmode=tk.MULTIPLE, width=50, height=15)
        self.variables_listbox.pack()

        self.find_entry = tk.Entry(self.root)
        self.find_entry.pack(pady=5)

        self.find_button = tk.Button(self.root, text="Find", command=self.find_variable)
        self.find_button.pack(pady=5)

        self.clear_selection_button = tk.Button(self.root, text="Clear Selection", command=self.clear_selection)
        self.clear_selection_button.pack(pady=5)

        self.compile_button = tk.Button(self.root, text="Compile", command=self.compile_data)
        self.compile_button.pack(pady=10)

        self.data_text = tk.Text(self.root, wrap=tk.NONE, height=20, width=100)
        self.data_text.pack(pady=10)

    def upload_file(self):
        self.file_path = filedialog.askopenfilename(filetypes=[("CSV files", "*.csv"), ("Excel files", "*.xls;*.xlsx")])
        if self.file_path:
            self.variables = self.get_variables_from_file()
            self.update_variables_listbox()

    def get_variables_from_file(self):
        if self.file_path.endswith('.csv'):
            df = pd.read_csv(self.file_path)
        elif self.file_path.endswith('.xls') or self.file_path.endswith('.xlsx'):
            df = pd.read_excel(self.file_path)
        return [col for col in df.columns if df[col].dtype == 'object' and not any(char.isdigit() for char in col)]

    def update_variables_listbox(self):
        self.variables_listbox.delete(0, tk.END)
        for var in self.variables:
            self.variables_listbox.insert(tk.END, var)

    def find_variable(self):
        search_text = self.find_entry.get().strip().lower()
        if search_text:
            matching_indices = []
            non_matching_indices = []
            for i, var in enumerate(self.variables):
                if search_text in var.lower():
                    matching_indices.append(i)
                else:
                    non_matching_indices.append(i)
            self.variables_listbox.selection_clear(0, tk.END)
            self.variables_listbox.delete(0, tk.END)
            for i in matching_indices:
                self.variables_listbox.insert(tk.END, self.variables[i])
                self.variables_listbox.itemconfig(tk.END, bg="yellow")
            for i in non_matching_indices:
                self.variables_listbox.insert(tk.END, self.variables[i])
                self.variables_listbox.itemconfig(tk.END, bg="white")

    def clear_selection(self):
        self.variables_listbox.selection_clear(0, tk.END)
        self.data_text.delete(1.0, tk.END)  # Clear the compiled data

    def compile_data(self):
        selected_indices = self.variables_listbox.curselection()
        self.selected_variables = [self.variables[i] for i in selected_indices]
        if self.selected_variables:
            df = pd.read_excel(self.file_path) if self.file_path.endswith('.xls') or self.file_path.endswith('.xlsx') else pd.read_csv(self.file_path)
            self.selected_data = df[self.selected_variables]
            self.show_selected_data()

    def show_selected_data(self):
        if self.selected_data is not None:
            self.data_text.delete(1.0, tk.END)
            for var in self.selected_variables:
                self.data_text.insert(tk.END, f"===== {var} =====\n")
                self.data_text.insert(tk.END, self.selected_data[var].to_string(index=False) + "\n\n")

if __name__ == "__main__":
    root = tk.Tk()
    app = DataPickerApp(root)
    root.mainloop()
